{"name":"Angular-thickm","tagline":"Class based REST API interaction for AngularJS","body":"ThickM\r\n-------\r\n\r\n[![Build Status](https://travis-ci.org/simplicitylabs/angular-thickm.svg?branch=develop)](https://travis-ci.org/simplicitylabs/angular-thickm)\r\n\r\n## Example usage\r\n\r\nExample code in `/example` folder: a simple GitHub Gist browser with a GitHub\r\nAPI compatibility layer.\r\n\r\n## Introduction\r\n\r\nThickM is a simplistic library for AngularJS which takes a class based approach\r\nto building model layers communicating with REST services. This is perfect for\r\nbuilding rich (\"thick\"), extendable models with domain logic in the form of\r\nproperties, methods and types.\r\n\r\nThickM is based on a belief that much of the logic for an application often is\r\nbest placed in the model, and that they often are stored at and retrieved from\r\na REST API service. It also wants implementation details for any such API to be\r\nbased on code rather than configuration, for easier testing and debugging and\r\nfor more flexibility.\r\n\r\nThis leads to simpler controllers, easier and fewer redundant tests and an\r\neasier to maintain codebase.\r\n\r\nThickM doesn't try to be a drop-in solution for every API, because APIs,\r\napplications, uses and technologies are different.\r\n\r\nWouldn't it be cool to have models like this?\r\n\r\n```javascript\r\nFlight.query({from: 'New York', to: 'London'}).then(function(flights) {\r\n  console.log(flights.length); // outputs 8\r\n  console.log(flights.getAvailableSeats()); // outputs 324\r\n\r\n  // ...\r\n\r\n  var fastestFlight = fligths.getFastest();\r\n  console.log(fastestFlight instanceof Flight); // outputs true\r\n\r\n  fastestFligth.book(2); // books two seats\r\n});\r\n```\r\n\r\n## Overview\r\n\r\nThink of ThickM as the bottom layer in a layer based model layer. Say layer one\r\nmore time for good measure. The layers are:\r\n\r\n - Your models\r\n - API specific compatibility layer\r\n - ThickM\r\n\r\nLet's go though them from the top down:\r\n\r\n### Your models\r\n\r\nThese are the application or domain specific models for your application. They\r\nimplement stuff like users, groups, cars, trees or any other entity you might\r\nneed. They typically consist of one class per model, implemented in JavaScript,\r\nand can be as minimal as a couple of lines of code, or as big and complex as you\r\nwant.\r\n\r\n```javascript\r\nangular.module('myApp.model.plane')\r\n.factory('Plane', function PlaneFactory(MyApiModel) {\r\n  function Plane(data) {\r\n    MyApiModel.call(this, data); // call parent constructor\r\n  }\r\n\r\n  MyApiModel.extend(Plane); // extend parent class\r\n  Plane.prototype._modelName = 'planes'; // goes in the URLs\r\n\r\n  // Possibly overwrite or add methods here ...\r\n\r\n  return Plane;\r\n});\r\n```\r\n\r\nIf two or more of the models share logic, it may make sense to create a common\r\nsuperclass which they both inherit from.\r\n\r\nIt may also make sense to create a specialized collection class for the model\r\nor models, which inherits from the API compatibility layer's.\r\n\r\n### API compatibility layer\r\n\r\nThe API compatibility layer specifies how your API works: how meta data is\r\ndescribed and organized, where items are located in a response, implementation\r\nof support for technologies such as etags and so on.\r\n\r\nIt can also have its own logic and methods, which makes sense for the API or\r\nusage in question, or specialized error handling.\r\n\r\nCompatibility is created by overwriting properties or methods of the\r\n`ThickModel` superclass.\r\n\r\nA full implementation of an API compatibility layer with etags can be found\r\nat [angular-evening](https://github.com/simplicitylabs/angular-evening), a\r\nlibrary implemented for APIs created with the Python library Eve.\r\n\r\n```javascript\r\n/* These classes implement a minimal API compatibility layer, which can be\r\n * specific to your app or a stand-alone library facilitating apps for the\r\n * kind of API you're using.\r\n *\r\n * This implementation only sets models' id field to '_id', and specifies that\r\n * items in query responses are located in '_items', while meta data is in\r\n * '_meta'.\r\n */\r\n\r\n/**\r\n * MyApiModel\r\n */\r\nangular.module('myApi.model')\r\n.factory('MyApiModel', function MyApiModelFactory(ThickModel,\r\n    MyApiModelCollection) {\r\n  function MyApiModel(data) {\r\n    this._primaryField = '_id';  // set 'id' field of models\r\n    ThickModel.call(this, data); // call parent constructor\r\n  }\r\n\r\n  ThickModel.extend(MyApiModel); // extend parent class\r\n  MyApiModel._collectionClass = MyApiModelCollection; // set collection class\r\n\r\n  MyApiModel._modelName = 'mymodel'; // for URLs\r\n  MyApiModel._baseUrl = '/api/v1/';  // for URLs, can also be set in API layer\r\n\r\n  // Possibly overwrite or add methods here ...\r\n\r\n  return MyApiModel;\r\n});\r\n\r\n/**\r\n * MyApiModelCollection\r\n */\r\nangular.module('myApi.collection')\r\n.factory('MyApiModelCollection',\r\n    function MyApiModelCollection(ThickModelCollection) {\r\n\r\n  function MyApiModelCollection() {\r\n    ThickModelCollection.apply(this, arguments); // call parent constructor\r\n  }\r\n  ThickModelCollection.extend(MyApiModelCollection); // extend parent class\r\n\r\n  MyApiModelCollection._itemsField = '_items'; // set where the array of items\r\n                                               // (which will be converted to\r\n                                               // model instances) are\r\n  MyApiModelCollection._metaField = '_meta'; // set where resource meta data\r\n                                             // such as total available items\r\n                                             // and pagination is located\r\n\r\n  // Possibly overwrite or add methods here ...\r\n\r\n  return MyApiModelCollection;\r\n});\r\n```\r\n\r\n### ThickM\r\n\r\nThe ThickM layer is at the bottom, consisting of the classes `ThickModel` and\r\n`ThickModelCollection`, superclasses for models and model collections,\r\nrespectively. They are responsible for communication using `$http`, with methods\r\nlike `get()`, `query()`, `save()` and `delete()`.\r\n\r\n## Adding to my project\r\n\r\n - Using bower: `bower install angular-thickm --save`.\r\n - Manually using either raw or minified versions in the `dist` folder.\r\n\r\n## Dependencies\r\n\r\nThere are no dependencies to this project other than AngularJS >= 1.2 (not\r\ntested for earlier verions).\r\n\r\n## Quick start guide\r\n\r\n### Configuration\r\n\r\nAdd `thickm` to your application dependencies:\r\n```javascript\r\nangular.module('myApp', ['thickm']);\r\n```\r\n\r\nCreate an API compatibility layer, as shown in the API compatibility section\r\nabove, subclassing ThickM's classes.\r\n\r\n```javascript\r\nangular.module('myApp')\r\n.factory('MyApiModel', function MyApiModelFactory(ThickModel,\r\n    MyApiModelCollection) {\r\n  function MyApiModel(data) {\r\n    // ...\r\n  }\r\n\r\n  MyApiModel._collectionClass = MyApiModelCollection;\r\n  // ...\r\n\r\n  return MyApiModel;\r\n});\r\n\r\nangular.module('myApp')\r\n.factory('MyApiModelCollection',\r\n    function MyApiModelCollection(ThickModelCollection) {\r\n\r\n  function MyApiModelCollection() {\r\n    // ...\r\n  }\r\n\r\n  // ...\r\n\r\n  return MyApiModelCollection;\r\n});\r\n```\r\n\r\nThen implement your models as shown in the \"Your models\" section above,\r\nsubclassing your API compatibility section.\r\n\r\n### Usage\r\n\r\n(Given a model named `Plane`)\r\n\r\nFetch a collection of items:\r\n```javascript\r\nPlane.query().then( ... ); // no parameters\r\nPlane.query({make: 'airbus'}).then( ... ); // with parameters\r\n```\r\n\r\nFetch one item by primary field:\r\n```javascript\r\nPlane.get(89); // fetches plane with id 89\r\n```\r\n\r\nCreate a new item and save it\r\n```javascript\r\nvar plane = new Plane({make: 'airbus', seats: 380});\r\nplane.save();\r\n```\r\n\r\nEdit and save an item:\r\n```javascript\r\nPlane.get(89).success(function(plane) {\r\n  plane.seats = 240;\r\n  plane.save();\r\n});\r\n```\r\n\r\nDelete an item:\r\n```javascript\r\n  // ...\r\n  plane.delete()\r\n```\r\n\r\n## Reference\r\n\r\nThese are the full list of methods and properties for the classes. Not all need\r\nto be used or overwritten.\r\n\r\n### ThickModelCollection\r\n\r\nSubclasses `Array` and behaves like one: can be indexed or iterated over, and\r\nhas properties like `length`.\r\n\r\n - `ThickModelCollection._itemsField` <br>Decides what field in the response\r\n holds the array of items. Default is `null`, indicating that the response is\r\n in itself an array.\r\n - `ThickModelCollection._metaField` <br>Decides what field in the response\r\n holds meta data, like the total number of items available and pagination.\r\n - `ThickModelCollection.itemsFromResponse(cls, response)` <br>Given a model\r\n class (subclass of `ThickModel`) and a response from `$http`, create an array\r\n of instances of the model class.\r\n - `ThickModelCollection.metaFromResponse(cls, response)` <br>Given a model\r\n class and a response from `$http`, create a meta data object with information\r\n about the total number of items available and pagination.\r\n - `ThickModelCollection.build(cls, response)` <br>Given a model class and\r\n a response from `$http`, create an instance of the `ThickModelCollection` class\r\n (or a subclass).\r\n - `ThickModelCollection.extend(cls)` <br>Extend a subclass, e.g.\r\n ```MyApiModelCollection.extend(ThickModelCollection);```\r\n\r\n### ThickModel\r\n\r\n - `ThickModel(data)`<br>Copies all properties of `data` to the new instance\r\n (constructor).\r\n - `ThickModel.prototype._modelName` <br>Holds the model name for the class,\r\n for building URLs, e.g. `planes`.\r\n - `ThickModel.prototype._baseUrl` <br>Holds the base URL for this model, e.g.\r\n `http://myapp.com/api/v1/`.\r\n - `ThickModel.prototype._primaryField` <br>The name of the field of models to\r\n look them up by when building URLs, e.g. `id`.\r\n - `ThickModel._collectionClass` <br>The class to use for collections of this\r\n model, default is `ThickModelCollection`. Use a reference to the class, not\r\n its name.\r\n - `ThickModel.validate(data)` <br>Validates that the data can be used to build\r\n an instance of the model. The default only validates that the data is an\r\n object. Returns `true` if the data is valid, or `false` if not.\r\n - `ThickModel.build(data)` <br>Factory method. Uses `data` object to create a\r\n validated instance of the model. Throws error if data is not valid. Returns\r\n an instance of `ThickModel`.\r\n - `ThickModel.prototype.getCollectionUrl()` <br>Returns the collection URL as\r\n a string, based on the base URL set in `_baseUrl` and the `_modelName`.\r\n - `ThickModel.prototype.getModelUrl()` <br>Returns the model URL, i.e. the\r\n URL used to fetch that instance, based on `getCollectionUrl()` and\r\n `_primaryField`.\r\n - `ThickModel.transformCollectionResponse(response)` <br>Transform a collection\r\n response into a model collection (`ThickModelCollection` or the collection\r\n model given by `_collectionClass`) instance. Returns an instance.\r\n - `ThickModel.transformItemResponse(response)` <br>Transform an item response\r\n into a model instance. Returns an instance.\r\n - `ThickModel.prototype.transformItemRequest(headers)` <br>Transform a request\r\n sent to the API, possibly by altering the `headers` object. Returns an object\r\n representing the instance, the default is `this`.\r\n - `ThickModel.queryUrl(url[, params])` <br>Query the specific URL for a\r\n  collection of items, using `params` as additional parameters in the URL (see\r\n `$http` documentation). Returns a promise resolving to an instance of the\r\n collection class.\r\n - `ThickModel.query([params])` <br>Query to the URL given by\r\n `getCollectionUrl()` for a collection of items. Returns promise resolving to an\r\n instance of the collection class.\r\n - `ThickModel.getUrl(url[, params])` <br>Get an item from the specific URL,\r\n using `params` as additional parameters in the URL (see `$http` documentation).\r\n Returns a promise resolving to an instance of `ThickModel`.\r\n - `ThickModel.get(id[, params])` <br>Get an item with the specific `id`\r\n (primary field), using `params` as additional parameters in the URL. Returns\r\n a promise resolving to an instance of `ThickModel`.\r\n - `ThickModel.prototype.isNew()` <br>Returns a boolean describing if the\r\n instance is fetched from the API or not. Default decides this based on whether\r\n its `id` (primary field) is set.\r\n - `ThickModel.prototype.update(data)` <br>Overwrite the instance's data with\r\n new data form the `data` object.\r\n - `ThickModel.prototype.save()` <br>Either POSTs or PUTs the instance to the\r\n URL given by `getCollectionUrl()` or `getModelUrl`, respectively, based on\r\n whether the object is \"new\" or not, given by `isNew()`. Returns a promise\r\n resolving to an instance of the model based on data given from the API, and\r\n also updates the instance from which is was called with this data.\r\n - `ThickModel.prototype.delete()` <br>DELETEs the model by a request to the\r\n URL given by `getModelUrl()` if the object is not new, or no-ops if it is.\r\n Either way, it returns a promise resolving to an empty object.\r\n - `ThickModel.extend(cls)` <br>Extend a subclass, e.g.\r\n ```MyApiModel.extend(ThickModel);```\r\n\r\n## Example code\r\n\r\nSee also the `/example` folder.\r\n\r\nOverwriting or creating new methods:\r\n```javascript\r\n// Extending a class method\r\n// Pull in the '_links' field\r\nMyModelCollection.build = function(cls, response) {\r\n  // call the parent method\r\n  var rc = ThickModelCollection.build.call(this, cls, response);\r\n  // extend the returned value\r\n  rc._links = response.data._links;\r\n  return rc;\r\n};\r\n\r\n// Creating a new instance method\r\n// See if there is more on the server\r\nMyModelCollection.prototype.hasMore = function() {\r\n  return angular.isDefined(this._links && this._links.next);\r\n};\r\n```\r\n\r\n\r\n## Open source finished API compatibility layers\r\n\r\n - [angular-evening](https://github.com/simplicitylabs/angular-evening) for the\r\n Python REST framework *Eve*\r\n\r\n## Contributing\r\n\r\nInstall\r\n```\r\nnpm install && bower install\r\n```\r\n\r\nBuild\r\n```\r\ngrunt\r\n```\r\n\r\nTest\r\n```\r\nnpm test\r\n```\r\n\r\n## License\r\n\r\n[MIT](http://opensource.org/licenses/MIT) © [Silicon Laboratories,\r\nInc.](http://www.silabs.com)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}